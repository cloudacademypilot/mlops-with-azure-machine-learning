{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.13.1.58284",
      "templateHash": "17277793070204216233"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "defaultValue": "[format('{0}', substring(guid(resourceGroup().id), 0, 4))]",
      "metadata": {
        "description": "Specifies the name of the Azure Machine Learning service workspace."
      }
    },
    "fileuploaduri": {
          "defaultValue": "https://mscalabshare.blob.core.windows.net/assets/mlops/uploadfile.ps1?sp=r&st=2023-01-23T03:33:57Z&se=2099-01-23T11:33:57Z&spr=https&sv=2021-06-08&sr=b&sig=1w8WG2DE97m1Om8uT4ijmsbWsbLsdGRRQikCDGjWAbo%3D",
          "type": "String",
          "metadata": {
              "description": "The URI of script file to upload blob container"
          }
      },
      "identityName": {
          "defaultValue": "PostDeploymentScriptuserAssignedName",
          "type": "String",
          "metadata": {
              "description": "Name of identity"
          }
      },
    "disableLocalAuth": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Disables local auth when not using ssh"
      }
    },
    "sshAccess": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Specifies whether SSH access should be enabled for compute instance"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D4S_v3",
      "metadata": {
        "description": "Specifies the VM size of the Compute Instance to create under Azure Machine Learning workspace."
      }
    },
    "maxNodeCount": {
      "type": "int",
      "defaultValue": 1
    },
    "minNodeCount": {
      "type": "int",
      "defaultValue": 0
    },
    "nodeIdleTimeBeforeScaleDown": {
      "type": "string",
      "defaultValue": "PT120S"
    },
    "remoteLoginPortPublicAccess": {
      "type": "string",
      "defaultValue": "NotSpecified"
    },
    "vmPriority": {
      "type": "string",
      "defaultValue": "Dedicated"
    },
    "utcValue": {
          "type": "string",
          "defaultValue": "[utcNow()]"
    },
    "uniqueSuffix": {
          "defaultValue": "[substring(uniqueString(resourceGroup().id), 0, 6)]",
          "type": "String",
          "metadata": {
              "description": "Unique Suffix"
          }
      },
    "firstuniquestring": {
          "defaultValue": "[format('firstunique{0}', parameters('uniqueSuffix'))]",
          "type": "String",
          "metadata": {
              "description": "firstuniquestring"
          }
    },
    "seconduniquestring": {
          "defaultValue": "[format('secondunique{0}', parameters('uniqueSuffix'))]",
          "type": "String",
          "metadata": {
              "description": "seconduniquestring"
          }
    }
  },
  "variables": {
    "tenantId": "[subscription().tenantId]",
    "storageAccountName": "[format('st{0}', parameters('name'))]",
    "keyVaultName": "[format('kv-{0}', parameters('utcValue'))]",
    "applicationInsightsName": "[format('appi-{0}', parameters('name'))]",
    "containerRegistryName": "[format('cr{0}', parameters('name'))]",
    "workspaceName": "[format('mlw{0}', parameters('name'))]",
    "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
    "keyVaultId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
    "applicationInsightId": "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
    "containerRegistryId": "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
    "fileuploadurivariable": "[parameters('fileuploaduri')]",
    "scriptParametersToUploadFile": "[format('-ResourceGroupName {0} -RawDataLakeAccountName {1}', resourceGroup().name, variables('storageAccountName'))]",
    "contributorRoleDefinitionId": "B24988ac-6180-42a0-ab88-20f7382dd24c",
    "bootstrapRoleAssignmentId": "[guid(parameters('firstuniquestring'), parameters('seconduniquestring'))]",
    "readerRoleDefinitionId": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
    "deploymentScriptName": "lab-user-retriever",
    "deploymentScriptIdentityName": "[concat('caldeployer-',resourceGroup().name)]",
    "deploymentScriptRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
    "deploymentScriptRoleAssignmentName": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('deploymentScriptIdentityName')), variables('deploymentScriptRoleDefinitionId'), resourceGroup().id)]",
    "saDeploymentScriptName": "lab-sa-deployer",
    "saDeploymentScriptdentityName": "[concat('calsadeployer-',resourceGroup().name)]",
    "saDeploymentScriptRoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('readerRoleDefinitionId'))]",
    "saDeploymentScriptRoleAssignmentName": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('saDeploymentScriptdentityName')), variables('saDeploymentScriptRoleDefinitionId'), resourceGroup().id)]"
    
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2022-05-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": false,
        "networkAcls": {
          "defaultAction": "Allow"
        }
      }
    },
   {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[variables('keyVaultName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "tenantId": "[variables('tenantId')]",
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "accessPolicies": [],
        "enableSoftDelete": true
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[resourceGroup().location]",
      "kind": "web",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2022-02-01-preview",
      "name": "[variables('containerRegistryName')]",
      "sku": {
        "name": "Standard"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "adminUserEnabled": false
      }
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces",
      "apiVersion": "2022-05-01",
      "name": "[variables('workspaceName')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "location": "[resourceGroup().location]",
      "properties": {
        "friendlyName": "[variables('workspaceName')]",
        "storageAccount": "[variables('storageAccountId')]",
        "keyVault": "[variables('keyVaultId')]",
        "applicationInsights": "[variables('applicationInsightId')]",
        "containerRegistry": "[variables('containerRegistryId')]",
        "publicNetworkAccess": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    }, 
    {
      "type": "Microsoft.MachineLearningServices/workspaces/computes",
      "apiVersion": "2021-07-01",
      "name": "[concat(variables('workspaceName'), '/','instance', parameters('utcValue'))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "computeType": "ComputeInstance",
        "disableLocalAuth": "[parameters('disableLocalAuth')]",
        "properties": {
          "VMSize": "[parameters('vmSize')]",
          "applicationSharingPolicy": "Personal",
          "sshSettings": {
            "sshPublicAccess": "[parameters('sshAccess')]"
          },
          "personalComputeInstanceSettings": {
              "assignedUser": {
                  "objectId": "[reference(variables('deploymentScriptName')).outputs.student]",
                  "tenantId": "[tenant().tenantId]"
              }
          }
        }
      },
        "dependsOn": [
          "[resourceId('Microsoft.MachineLearningServices/workspaces', concat(variables('workspaceName')))]",
          "[variables('deploymentScriptName')]"
            ]
    },
    {
      "type": "Microsoft.MachineLearningServices/workspaces/computes",
      "apiVersion": "2020-04-01",
      "name": "[concat(variables('workspaceName'), '/','cluster', parameters('utcValue'))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "computeType": "AmlCompute",
        "disableLocalAuth": "[parameters('disableLocalAuth')]",
        "properties": {
          "remoteLoginPortPublicAccess": "[parameters('remoteLoginPortPublicAccess')]",
          "scaleSettings": {
            "maxNodeCount": "[parameters('maxNodeCount')]",
            "minNodeCount": "[parameters('minNodeCount')]",
            "nodeIdleTimeBeforeScaleDown": "[parameters('nodeIdleTimeBeforeScaleDown')]"
          },
          "vmPriority": "[parameters('vmPriority')]",
          "vmSize": "[parameters('vmSize')]"
        }
      },
        "dependsOn": [
          "[resourceId('Microsoft.MachineLearningServices/workspaces', concat(variables('workspaceName')))]"
            ]
      
    },
    {
          "type": "Microsoft.Resources/deploymentScripts",
          "apiVersion": "2020-10-01",
          "name": "PostDeploymentScriptForFileUpload",
          "location": "[resourceGroup().location]",
          "dependsOn": [
              "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
          ],
          "kind": "AzurePowerShell",
          "identity": {
              "type": "UserAssigned",
              "userAssignedIdentities": {
                  "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]": {}
              }
          },
          "properties": {
              "azPowerShellVersion": "8.3",
              "cleanupPreference": "OnSuccess",
              "retentionInterval": "P1D",
              "timeout": "PT30M",
              "arguments": "[variables('scriptParametersToUploadFile')]",
              "primaryScriptUri": "[variables('fileuploadurivariable')]"
          }
      },
      {
          "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
          "apiVersion": "2018-11-30",
          "name": "[parameters('identityName')]",
          "location": "[resourceGroup().location]"
      },
      {
          "type": "Microsoft.Authorization/roleAssignments",
          "apiVersion": "2018-09-01-preview",
          "name": "[variables('bootstrapRoleAssignmentId')]",
          "dependsOn": [
              "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
          ],
          "properties": {
              "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('contributorRoleDefinitionId'))]",
              "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2018-11-30').principalId]",
              "scope": "[resourceGroup().id]",
              "principalType": "ServicePrincipal"
          }
      },
      {
        "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
        "name": "[variables('deploymentScriptIdentityName')]",
        "apiVersion": "2018-11-30",
        "location": "[resourceGroup().location]"
      },
      {
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[variables('deploymentScriptRoleAssignmentName')]",
        "dependsOn": [ "[variables('deploymentScriptIdentityName')]" ],
        "properties": {
          "roleDefinitionId": "[variables('deploymentScriptRoleDefinitionId')]",
          "principalId": "[reference(variables('deploymentScriptIdentityName')).principalId]",
          "scope": "[resourceGroup().id]",
          "principalType": "ServicePrincipal"
        }
      },
      {
          "type": "Microsoft.Resources/deploymentScripts",
          "apiVersion": "2020-10-01",
          "name": "[variables('deploymentScriptName')]",
          "location": "[resourceGroup().location]",
          "dependsOn": ["[variables('deploymentScriptIdentityName')]", "[variables('deploymentScriptRoleAssignmentName')]"],
          "kind": "AzureCLI",
          "identity": {
              "type": "UserAssigned",
              "userAssignedIdentities": { "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('deploymentScriptIdentityName'))]": {} }
          },
          "properties": {
              "forceUpdateTag": "[parameters('utcValue')]",
              "azCliVersion": "2.41.0",
              "timeout": "PT10M",
              "arguments": "[concat(subscription().subscriptionId,' ',resourceGroup().name)]",
                  "scriptContent": "subscriptionId=$1; resourceGroup=$2; while [ -z $student ]; do echo \"searching for student\"; echo Running az role assignment list --subscription $subscriptionId --resource-group $resourceGroup --query \"[? contains(to_string(roleDefinitionName),'cal-role-')].principalId\" -o tsv; student=$(az role assignment list --subscription $1 --resource-group $2 --query \"[? contains(to_string(roleDefinitionName),'cal-role-')].principalId\" -o tsv); done; echo \"Found student/principalId: $student\"; echo {\\\"student\\\": \\\"$student\\\"} > $AZ_SCRIPTS_OUTPUT_PATH",
              "cleanupPreference": "Always",
              "retentionInterval": "PT1H"
          }
      },
		{
            "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
            "name": "[variables('saDeploymentScriptdentityName')]",
            "apiVersion": "2018-11-30",
            "location": "[resourceGroup().location]"
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[variables('saDeploymentScriptRoleAssignmentName')]",
            "dependsOn": [
                "[variables('saDeploymentScriptdentityName')]"
            ],
            "properties": {
                "roleDefinitionId": "[variables('saDeploymentScriptRoleDefinitionId')]",
                "principalId": "[reference(variables('saDeploymentScriptdentityName')).principalId]",
                "scope": "[resourceGroup().id]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "[variables('saDeploymentScriptName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[variables('saDeploymentScriptRoleAssignmentName')]",
                "[resourceId('Microsoft.Resources/deployments', 'VaultReference')]"
            ],
            "kind": "AzureCLI",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('saDeploymentScriptdentityName'))]": {}
                }
            },
            "properties": {
                "forceUpdateTag": "[parameters('utcValue')]",
                "azCliVersion": "2.41.0",
                "timeout": "PT5M",
                "arguments": "[concat(subscription().subscriptionId,' ',resourceGroup().name,' ','1923afe4-b16c-4022-a656-9639c444a1e0',' ',reference(resourceId('Microsoft.Resources/deployments', 'VaultReference')).outputs.secret.value,' ','labscloudacademy.onmicrosoft.com')]",
                "scriptContent": "appregname=gitserviceprincipal$RANDOM; echo appregname is $appregname; az login --service-principal -u $3 -p $4 --tenant $5; clientid=$(az ad app create --display-name $appregname --query appId --output tsv); echo clientid is $clientid; clientsecret=$(az ad app credential reset --id $clientid --append --query password --output tsv); echo clientsecret is $clientsecret; az ad sp create --id $clientid; role_definition=$(az role definition list --subscription $1 --resource-group $2 --custom-role-only --query \"[? contains(to_string(roleName),'cal-role-')].name\" --output tsv); echo role_definition is $role_definition; az role assignment create --assignee $clientid --role $role_definition --scope /subscriptions/$1/resourceGroups/$2; echo {\\\"appregname\\\": \\\"$appregname\\\",\\\"clientid\\\": \\\"$clientid\\\",\\\"clientsecret\\\": \\\"$clientsecret\\\"} > $AZ_SCRIPTS_OUTPUT_PATH",
                "cleanupPreference": "Always",
                "retentionInterval": "PT1H"
            }
        },
        {
          "name": "VaultReference",
          "type": "Microsoft.Resources/deployments",
          "apiVersion": "2021-04-01",
          "properties": {
            "expressionEvaluationOptions": {
              "scope": "inner"
            },
            "mode": "Incremental",
            "parameters": {},
            "template": {
              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
              "contentVersion": "1.0.0.0",
              "parameters": {
                "vaultName": {
                  "type": "string",
                  "defaultValue": "ca-lab-vault",
                  "metadata": {
                    "description": "The name of the key vault that contains the secret."
                  }
                },
                "secretName": {
                  "type": "string",
                  "defaultValue": "pb-secret",
                  "metadata": {
                    "description": "The name of the secret."
                  }
                },
                "vaultResourceGroupName": {
                  "type": "string",
                  "defaultValue": "ca-labs-store",
                  "metadata": {
                    "description": "The name of the resource group that contains the key vault."
                  }
                },
                "vaultSubscription": {
                  "type": "string",
                  "defaultValue": "c4fd644c-22da-4e2e-8c6c-86dfa6a28964",
                  "metadata": {
                    "description": "The name of the subscription that contains the key vault."
                  }
                }
              },
              "resources": [
                {
                  "type": "Microsoft.Resources/deployments",
                  "apiVersion": "2021-04-01",
                  "name": "secretlinkedTemplate",
                  "properties": {
                    "mode": "Incremental",
                    "parameters": {
                      "secret": {
                        "reference": {
                          "keyVault": {
                            "id": "[resourceId(parameters('vaultSubscription'), parameters('vaultResourceGroupName'), 'Microsoft.KeyVault/vaults', parameters('vaultName'))]"
                          },
                          "secretName": "[parameters('secretName')]"
                        }
                      }
                    },
                    "templateLink": {
                      "uri": "https://raw.githubusercontent.com/cloudacademy/azure-lab-artifacts/master/azure-key-vault/azuredeploy.json",
                      "contentVersion": "1.0.0.0"
                    }
                  }
                }
              ],
              "outputs": {
                "secret": {
                  "type": "string",
                  "value": "[reference('secretlinkedTemplate').outputs.secret.value]"
                }
              }
            }
          }
        }
      
  ],
	"outputs": {
        "subscriptionId": {
            "value": "[subscription().subscriptionId]",
            "type": "string"
        },
        "tenantId": {
            "value": "[tenant().tenantId]",
            "type": "string"
        },
        "clientId": {
            "value": "[reference(variables('saDeploymentScriptName')).outputs.clientid]",
            "type": "string"
        },
        "clientSecret": {
            "value": "[reference(variables('saDeploymentScriptName')).outputs.clientsecret]",
            "type": "string"
        },
        "appName": {
            "value": "[reference(variables('saDeploymentScriptName')).outputs.appregname]",
            "type": "string"
        }
    }
}        
        
